{
"usercode":
 "import java.io.FileWriter;\nimport java.io.FileReader;\nimport java.io.BufferedWriter;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.io.PrintWriter;\n\n/* *** ODSATag: Link *** */\nclass Link {\n private Object e;\n private Link n;\n\n // Constructors\n Link(Object ine, Link inn) { e = ine; n = inn; }\n Link(Link inn) { e = null; n = inn; }\n\n public Object element() { return e; } // Return the value\n public void setelement(Object ine) { e = ine; } // Set element value\n public Link next() { return n; } // Return next link\n public void setnext(Link inn) { n = inn; } // Set next link\n}\n/* *** ODSAendTag: Link *** */\n\npublic class studentpntrequalspntrPROG {\n\npublic static void main(String [ ] args) {\n\n\nboolean SUCCESS = false;\n\n Link studentsHead; \n \n studentsHead = reAssignPointer(); \n \n Link Mthird = new Link(3,null); \n Link Msecond = new Link(2,Mthird); \n Link Mfirst = new Link(1,Msecond); \n\n Link Mp; \n Link Mq; \n Link Mr; \n\n Mp = Mfirst;\n Mq = Msecond;\n \n Mp = Mq; \n \n if (Mp.element() == studentsHead.element()) SUCCESS = true;\n\n try{\n\n \n PrintWriter output = new PrintWriter(\"output\", \"UTF-8\");\n\n\n if (SUCCESS) { \n \n output.println(\"Well Done!\");\n output.close();\n }\n else \n {\n output.println(\"Try Again! You have either disconnected your links or incorrectly reassigned the variable p.\");\n output.close();\n \n }\n \n }\n catch (IOException e) {\ne.printStackTrace();\n }\n\n\n}\n\npublic static Link createList(int one, int two, int three) { \n \n Link tail = new Link(three,null); \n Link next = new Link(two,tail); \n Link head = new Link(one,next); \n \n return head; \n}\n\npublic static void endTraceNow(){\n \n //End the trace \n // This function's only purpose is to act as a flag to end the trace \n // for the Java - Visualization \n}\n\npublic static void startTraceNow(){\n \n //start the trace \n // This function's only purpose is to act as a flag to start the trace \n // for the Java - Visualization \n}\n\npublic static boolean checkIfLinksLinked(Link head){\n \n Object two = 2; \n Object three = 3; \n \n boolean linkFlag = false; \n \n if(head.element() == two) \n {\n if(head.next().element() == three) \n {\n linkFlag = true; \n }\n else \n {\n linkFlag = false; \n }\n }\n else \n {\n linkFlag = false; \n }\n \n return linkFlag; \n}\n\n\n\npublic static Link reAssignPointer() {\n\nstartTraceNow(); \n\nLink p = createList(1,2,3); \nLink q = p.next(); \n\np = q; \n\nendTraceNow(); \n\nreturn p; \n\n}\n\n}\n\n",
"options": {},
"args": [],
"stdin": ""
}
